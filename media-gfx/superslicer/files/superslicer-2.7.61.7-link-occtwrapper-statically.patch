commit eb1056779f1fa34fa362ad7aaea2e046c511c504 (HEAD -> yahor/2.7.61.5/gentoo-fixes)
Author: Yahor Berdnikau <egorr.berd@gmail.com>
Date:   Sat Jun 28 18:33:02 2025 +0200

    Link OCCTWrapper statically

diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index 3b39dcf080..2cc6dd680d 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -31,7 +31,7 @@ endif()
 add_subdirectory(libslic3r)
 
 if (SLIC3R_ENABLE_FORMAT_STEP)
-    add_subdirectory(occt_wrapper)
+    add_subdirectory(occt_wrapper EXCLUDE_FROM_ALL)
 endif ()
 
 if (SLIC3R_GUI)
diff --git a/src/libslic3r/CMakeLists.txt b/src/libslic3r/CMakeLists.txt
index 570a36f637..1dbc732899 100644
--- a/src/libslic3r/CMakeLists.txt
+++ b/src/libslic3r/CMakeLists.txt
@@ -619,10 +619,7 @@ target_link_libraries(libslic3r
     LibBGCode::bgcode_convert
     )
 
-if (APPLE)
-    # TODO: we need to fix notarization with the separate shared library
-    target_link_libraries(libslic3r OCCTWrapper)
-endif ()
+target_link_libraries(libslic3r OCCTWrapper)
 
 if (TARGET OpenVDB::openvdb)
     target_link_libraries(libslic3r OpenVDB::openvdb)
diff --git a/src/libslic3r/Format/STEP.cpp b/src/libslic3r/Format/STEP.cpp
index 48e9f941db..e60282a6e8 100644
--- a/src/libslic3r/Format/STEP.cpp
+++ b/src/libslic3r/Format/STEP.cpp
@@ -26,17 +26,13 @@
 
 namespace Slic3r {
 
-#if __APPLE__
 extern "C" bool load_step_internal(const char *path, OCCTResult* res);
-#endif
 
 LoadStepFn get_load_step_fn()
 {
     static LoadStepFn load_step_fn = nullptr;
 
-#ifndef __APPLE__
     constexpr const char* fn_name = "load_step_internal";
-#endif
 
     if (!load_step_fn) {
         boost::filesystem::path libpath = boost::dll::program_location().parent_path();
@@ -58,42 +54,8 @@ LoadStepFn get_load_step_fn()
             FreeLibrary(module);
             throw;
         }
-#elif __APPLE__
-        load_step_fn = &load_step_internal;
 #else
-        // first try with system install directory
-        if (libpath.filename() == "bin") {
-            libpath = libpath.parent_path();
-            libpath /= "lib";
-        }
-        libpath /= "superslicer";
-        libpath /= "OCCTWrapper.so";
-        BOOST_LOG_TRIVIAL(debug) << "Exsists"<<libpath.string()<< " ? "<<boost::filesystem::exists(libpath);
-        if (!boost::filesystem::exists(libpath)) {
-            boost::filesystem::path libpath_old = libpath;
-            // retry with appimage directory
-            libpath = boost::dll::program_location().parent_path();
-            libpath /= "OCCTWrapper.so";
-            BOOST_LOG_TRIVIAL(debug) << "Exsists"<<libpath.string()<< " ? "<<boost::filesystem::exists(libpath);
-            if (!boost::filesystem::exists(libpath)) {
-                BOOST_LOG_TRIVIAL(error) << "Error: can't find '"<<libpath_old.string()<< "' nor '"<<libpath.string()<<"' to load.";
-                libpath = "OCCTWrapper.so";
-            }
-        }
-
-        BOOST_LOG_TRIVIAL(debug) << "try to open dll "<<libpath.c_str()<< " ? "<<boost::filesystem::exists(libpath);
-        void *plugin_ptr = dlopen(libpath.c_str(), RTLD_NOW | RTLD_GLOBAL);
-
-        if (plugin_ptr) {
-            load_step_fn = reinterpret_cast<LoadStepFn>(dlsym(plugin_ptr, fn_name));
-            if (!load_step_fn) {
-                dlclose(plugin_ptr);
-                throw Slic3r::RuntimeError(std::string("Cannot load function from OCCTWrapper.so: ") + fn_name
-                                           + "\n\n" + dlerror());
-            }
-        } else {
-            throw Slic3r::RuntimeError(std::string("Cannot load OCCTWrapper.so:\n\n") + dlerror());
-        }
+        load_step_fn = &load_step_internal;
 #endif
     }
 
diff --git a/src/occt_wrapper/CMakeLists.txt b/src/occt_wrapper/CMakeLists.txt
index d66a81f77b..da16036dcf 100644
--- a/src/occt_wrapper/CMakeLists.txt
+++ b/src/occt_wrapper/CMakeLists.txt
@@ -1,12 +1,7 @@
 cmake_minimum_required(VERSION 3.13)
 project(OCCTWrapper)
 
-if (APPLE)
-    # TODO: we need to fix notarization with the separate shared library
-    add_library(OCCTWrapper STATIC OCCTWrapper.cpp)
-else ()
-    add_library(OCCTWrapper MODULE OCCTWrapper.cpp)
-endif ()
+add_library(OCCTWrapper STATIC OCCTWrapper.cpp)
 
 set_target_properties(OCCTWrapper
     PROPERTIES
